#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Copyright (c) 2013 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#           http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""This a template for a new test set that explains how to create new tests.

First, copy this file and rename it to `test_<my_setup_name>.py`, for example
`test_big_ha_neutron_setup.py`. This is because the tests are approximately
grouped by what topology they need. The requirements for this group of tests to
be run is specified in the `requirements` function - if they are not fulfilled,
the tests will be skipped. Ideally, you should also provide some way to deploy
a setup that fulfills them, so that other people can use it.

In the beginning, the save of all the servers will be saved (old backups or
snapshots will be reused by default). A file will be created on one of the
servers in the setup. There is a basic example test that tries if the file
exists. After the test finishes, the state will be restored and so the file
won't be there anymore.
"""

from nose import SkipTest
from destroystack.tools.server_manager import ServerManager


def requirements(manager):
    """Specify requirements for this group of tests to run.

    Return True if the requirements are fulfilled. You can add any kind of
    condition on it. As it is, it only requires that there is at least one
    keystone server.
    """
    return (manager.get(role='keystone') is not None)


class TestMySetupName():
    manager = None

    @classmethod
    def setupClass(cls):
        cls.manager = ServerManager()
        if not requirements(cls.manager):
            raise SkipTest
        # if enabled in the configuration, create a snapshot of the machines,
        # or try backing up the files if the management is set to manual (not
        # recommended, it's only best-effort)
        cls.manager.save_state()

    def setUp(self):
        # stuff that will be done for each test
        # you can select any server from the server manager, in this case it
        # selects a random compute node
        self.server = self.manager.get(role='keystone')
        # command executed in the shell as root
        self.server.cmd('touch some_file')

    def tearDown(self):
        # restore the snapshot if snapshotting is enabled in the
        # configuration, or restore the backed up files if the management is
        # set to manual. This will make sure that if one test destroys the
        # setup, another test can run with the same environment.
        self.manager.load_state()

    def test_file(self):
        # you can run any command on any of the servers as root
        result = self.server.cmd('ls')
        assert 'some_file' in result.out
